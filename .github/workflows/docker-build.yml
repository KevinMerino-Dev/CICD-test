name: CI/CD Pipeline v2
on:
  push:
    branches:
      - main

jobs:
  pipeline:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Check if the Docker image exists
      - name: Check if base image exists
        id: check-image
        run: |
          if docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest > /dev/null 2>&1; then
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      # 4. Import base image if it exists
      - name: Import base image
        if: env.IMAGE_EXISTS == 'true'
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest
          echo "Base image imported successfully."

      # 5. Build Docker Image
      - name: Build Docker Image
        id: build-image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build -t cicd-test:latest .
          IMAGE_ID=$(docker images -q cicd-test:latest)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      # 6. Test Docker Image
      - name: Test Docker Image
        run: |
          docker run --rm cicd-test:latest python test_main.py

      # 7. Push Docker Image
      - name: Push Docker Image
        run: |
          docker tag cicd-test:latest ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest

      # 8. Cleanup
      - name: Cleanup Docker
        run: |
          docker rmi cicd-test:latest || true
