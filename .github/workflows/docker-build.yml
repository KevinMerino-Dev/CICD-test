name: Docker CI/CD

on:
  push:
    branches:
      - main

jobs:
  login: # 1. Iniciar sesión en Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  import-docker-cache: # 2. Importar caché Docker
    runs-on: ubuntu-latest
    needs: login
    steps:
      - name: Configurar Docker
        uses: docker/setup-buildx-action@v2

      - name: Import Docker cache
        run: |
          if docker pull ${{ secrets.DOCKER_USERNAME }}/cicd-test:cache; then
            echo "CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "CACHE_EXISTS=false" >> $GITHUB_ENV
          fi

  build: # 3. Construir imagen Docker
    runs-on: ubuntu-latest

    needs: import-docker-cache
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          if [[ "$CACHE_EXISTS" == "true" ]]; then
            docker build \
              --cache-from=${{ secrets.DOCKER_USERNAME }}/cicd-test:cache \
              --tag ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest \
              .
          else
            echo "Building without cache."
            docker build \
              --tag ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest \
              .
          fi

      - name: Verify Docker image built
        run: docker images

  test: # 4. Probar código en máquina anfitriona
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Ejecutar pruebas unitarias
        run: python -m unittest discover -s . -p "test_*.py"

  test-docker: # 5. Probar el contenedor Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Probar el contenedor Docker
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest python -m unittest discover -s . -p "test_*.py"

  push: # 6. Subir imagen a Docker Hub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Subir la imagen a Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cicd-test:cache
      -name: Verificar push
        run: |
          echo "OK, Image pushed to Docker Hub"

  cleanup: # 7. Limpieza de imágenes locales
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Limpiar imágenes locales
        run: |
          docker rmi ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest || echo "No image to remove"
          docker rmi ${{ secrets.DOCKER_USERNAME }}/cicd-test:cache || echo "No image to remove"
          docker rmi $(docker images -f "dangling=true" -q) || echo "No dangling images to remove"
