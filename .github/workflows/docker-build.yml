name: CI/CD Pipeline with Docker

on:
  push:
    branches:
      - main

jobs:
  pipeline:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: cicd-test
      CACHE_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cicd-test:cache
      FINAL_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cicd-test:latest

    steps:
      # Step 1: Docker Login
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 2: Import Cache
      - name: Pull Cache Image
        id: import-cache
        run: |
          if docker pull $CACHE_IMAGE; then
            echo "CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "CACHE_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 3: Build Image
      - name: Build Docker Image
        id: build-image
        run: |
          if [[ "$CACHE_EXISTS" == "true" ]]; then
            docker build --cache-from=$CACHE_IMAGE -t $IMAGE_NAME .
          else
            docker build -t $IMAGE_NAME .
          fi
          # Save image ID for later steps
          IMAGE_ID=$(docker images -q $IMAGE_NAME)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      # Step 4: Test Image
      - name: Test Docker Image
        run: |
          docker run --rm -e CONFIG_ENV_FILE=config.env $IMAGE_NAME python test_main.py

      # Step 5: Push Final Image
      - name: Push Final Docker Image
        if: always() # Always run to ensure image is pushed after tests
        run: |
          docker tag $IMAGE_NAME $FINAL_IMAGE
          docker push $FINAL_IMAGE
